"use client";

import Head from "next/head";
import Image from "next/image";
import { Inter } from "@next/font/google";
import styles from "@/styles/Home.module.css";
import TextMain from "./components/TextMain";
import ButtonPomodoro from "./components/ButtonPomodoro";
import iconsDatas from "../datas/icons";
import { svgStaticDatas, svgDynamicDatas } from "../datas/svg";
import { useEffect, useState } from "react";
import PomodoroTimer from "./components/PomodoroTimer";
import ButtonAddTask from "./components/ButtonAddTask";
import TodoContainer from "./components/TodoCard";
import TaskModal from "./components/TaskModalSettings";
import Task from "./components/Task";
import AddTask from "./components/AddTask";
import { getTodos, createTodo } from "./api/todo-api";
import TodoCard from "./components/TodoCard";
import TodoProvider, { useTodoContext } from "@/context/TodoProvider";
import TaskModalSettings from "./components/TaskModalSettings";
import TaskModalAdd from "./components/TaskModalAdd";
import Pomodoro from "./components/Pomodoro";
const inter = Inter({ subsets: ["latin"] });
// interface Todo {
//   title: string;
//   description?: string;
//   taskId: string;
// }
export default function Home() {
  const [iconIndex, setIconIndex] = useState(0);
  // const [todos, setTodos] = useState<Todo[]>([]);

  const { todos, setTodos, todoId } = useTodoContext();
  const logTodo = (todo: any) => {
    console.log("aaaaaaaaaaaaaaaaa", todo);
  };

  const [isModalSettingsOpen, setIsModalSettingsOpen] = useState(false);
  const [isModalAddOpen, setIsModalAddOpen] = useState(false);

  console.log("todo context", todoId);
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className=" w-full h-screen bg-hero-background bg-cover bg-no-repeat bg-bottom ">
        {/* Content */}
        <div className="w-full h-full flex  pt-40 pb-10 px-16">
          {/* Left column / Pomodoro part */}
          <div className=" lg:h-full lg:w-1/2  pt-7 flex flex-col  justify-between">
            <TextMain />
            <Pomodoro />
          </div>
          {/* Right column / Todo part */}
          <div className=" lg:h-full lg:w-1/2 bg-red-200 p-10 rounded-todoContainer bg-todoContainer">
            <ButtonAddTask handleClick={() => setIsModalAddOpen(true)} />
            {/* <AddTask /> */}
            <div className="mt-20 grid grid-cols-3 w-full place-items-center gap-[10%] overflow-auto scroll-smooth scrollbar-hide ">
              {todos.map((todo) => {
                // logTodo(todo);
                return (
                  <>
                    <TodoCard
                      key={todo._id}
                      taskTitle={todo.title}
                      handleClick={() => setIsModalSettingsOpen(true)}
                      todoId={todo._id ? todo._id : ""}
                    />
                  </>
                );
              })}
              <TaskModalSettings
                setModalClose={() => setIsModalSettingsOpen(false)}
                handleClick={() => setIsModalSettingsOpen(false)}
                isModalOpen={isModalSettingsOpen}
                taskId={todoId}
              />
              <TaskModalAdd
                setModalClose={() => setIsModalAddOpen(false)}
                handleClick={() => setIsModalAddOpen(!isModalAddOpen)}
                isModalOpen={isModalAddOpen}
              />
            </div>
          </div>
        </div>
      </main>
    </>
  );
}
